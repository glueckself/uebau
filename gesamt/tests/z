z = fun x -> 3-x end;
f = fun x ->
  if x<0 then
    0-1
  else
    if 0<x then
      1
    else
      0
    end
  end
end;

f1 = fun x ->
  if x<0 then
    0-x
  else
    x
  end
end;

sum = fun x -> sum1 (0.x) end;
sum1 = fun x ->
  if tail x then
    sum1 (((head x)+(head tail x)).(tail tail x))
  else
    head x
  end
end;

sum3 = fun x -> sum2 (0.x) end;
sum2 = fun x ->
  if tail x then
    let y = (tail x) in
      sum1 (((head x)+(head y)).(tail y))
    end
  else
    head x
  end
end;

%%.0
RET(z(6) == 0);

%%.0
RET(z(10) == -4);

%%.0
RET(f(0)==0);

%%.0
RET(f(8)==2);

%%.0
extern long f(long);
RET(f(-4)==-2); //!

%%.0
RET(f1(8)==8); //TAG_NUM(4) == TAG_NUM(4)

%%.0
extern long f(long);
RET(f1(-4)==4);

%%.0
const long list2[] = {TAG_NUM(3), 0};
const long list1[] = {TAG_NUM(1),TAG_LIST(list2)};
const long list[] = {TAG_NUM(1),TAG_LIST(list1)};

RET(sum(TAG_LIST(list)) == 5);

%%.0
const long list2[] = {TAG_NUM(3), 0};
const long list1[] = {TAG_NUM(1),TAG_LIST(list2)};
const long list[] = {TAG_NUM(1),TAG_LIST(list1)};

RET(sum3(TAG_LIST(list)) == TAG_NUM(5));

%%.0
const long list2[] = {TAG_NUM(3), 0};
const long list1[] = {TAG_NUM(1),TAG_LIST(list2)};
const long list[] = {TAG_NUM(-2),TAG_LIST(list1)};

RET(sum(TAG_LIST(list)) == TAG_NUM(2));


