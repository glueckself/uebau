%{
#include "asmgen.h"

%}

%term OP_ADD=1 OP_MINUS=2 OP_MULT=3 OP_AND=4 OP_NOT=5 OP_LESS=6 OP_EQUAL=7 OP_ISNUM=8 OP_ISLIST=9 OP_ISFUN=10 OP_DOT=11 OP_HEAD=12 OP_TAIL=13 OP_CALL=14 OP_IDENT=15 OP_NUM=16

%%

fun: OP_CALL(expr)           # 0 #

expr: OP_ADD(expr, expr)     # 1 # genAdd(kids[0]->regname, kids[1]->regname);
expr: OP_MINUS(expr, expr)   # 1 # genMinus(kids[0]->regname, kids[1]->regname);
expr: OP_MULT(expr, expr)    # 1 # genMult(kids[0]->regname, kids[1]->regname);
expr: OP_AND(expr, expr)     # 1 # genAnd(kids[0]->regname, kids[1]->regname);
expr: OP_NOT(expr)           # 1 # genNot(kids[0]->regname);
expr: OP_LESS(expr, expr)    # 1 # genLess(kids[0]->regname, kids[1]->regname);
expr: OP_EQUAL(expr, expr)   # 1 # genEqual(kids[0]->regname, kids[1]->regname);
expr: OP_ISNUM(expr)         # 1 # genIsNum(kids[0]->regname);
expr: OP_ISLIST(expr)        # 1 # genIsList(kids[0]->regname);
expr: OP_ISFUN(expr)         # 1 # genIsFun(kids[0]->regname);
expr: OP_DOT(expr, expr)     # 1 # genDot(kids[0]->regname, kids[1]->regname);
expr: OP_HEAD(expr)          # 1 # genHead(kids[0]->regname);
expr: OP_TAIL(expr)          # 1 # genTail(kids[0]->regname);
expr: OP_IDENT               # 1 # assignFromIdent(bnode->regname, bnode->ident);
expr: OP_NUM                 # 1 # assignFromNum(bnode->regname, bnode->value);

%%
