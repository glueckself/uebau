%{
#include "asmgen.h"
#ifdef DEBUG
#include "burm_string.h"
#endif

/*

expr: OP_IDENT                        # 1 # assignFromIdent(bnode->regname, bnode->ident->regname);
*/
%}

%term OP_PLUS=1 OP_MINUS=2 OP_MULT=3 OP_AND=4 OP_NOT=5 OP_LESS=6 OP_EQUAL=7 OP_ISNUM=8 OP_ISLIST=9 OP_ISFUN=10 OP_DOT=11 OP_HEAD=12 OP_TAIL=13 OP_CALL=14 OP_IDENT=15 OP_NUM=16

%%

fun: OP_CALL(expr)                    # 0 # genReturn(bnode->regname, kids[0]->regname);

expr: numexpr                         # 1 # genTagNum(bnode->regname, kids[0]->regname);
expr: listexpr                        # 1 # genTagList(bnode->regname, kids[0]->regname);
expr: OP_HEAD(listexpr)               # 1 # genHead(bnode->regname, kids[0]->regname);
expr: OP_TAIL(listexpr)               # 1 # genTail(bnode->regname, kids[0]->regname);
expr: OP_IDENT                        # 1 # assignFromIdent(bnode->regname, bnode->ident->regname);

listexpr: OP_DOT(expr, expr)          # 1 # genDot(kids[0]->regname, kids[1]->regname);
listexpr: OP_IDENT                    # 1 # genListFromIdent(bnode->regname, bnode->ident);
listexpr: expr                        # 1 # genListFromReg(bnode->regname, kids[0]->regname);

numexpr: OP_ISNUM(expr)               # 2 # genIsNum(bnode->regname, kids[0]->regname);
numexpr: OP_ISNUM(numexpr)            # 1 # assignFromNum(bnode->regname, 1);
numexpr: OP_ISNUM(imm)                # 1 # assignFromNum(bnode->regname, 0);
numexpr: OP_ISLIST(expr)              # 2 # genIsList(bnode->regname, kids[0]->regname);
numexpr: OP_ISLIST(numexpr)           # 1 # assignFromNum(bnode->regname, 0);
numexpr: OP_ISLIST(imm)               # 1 # assignFromNum(bnode->regname, 0);
numexpr: OP_ISFUN(expr)               # 2 # genIsFun(bnode->regname, kids[0]->regname);
numexpr: OP_ISFUN(numexpr)            # 1 # assignFromNum(bnode->regname, 0);
numexpr: OP_ISFUN(imm)                # 1 # assignFromNum(bnode->regname, 0);
numexpr: OP_PLUS(numexpr, numexpr)    # 2 # genAdd((kids[0]->regname), (kids[1]->regname));
numexpr: OP_PLUS(numexpr, imm)        # 1 # genAddI((kids[0]->regname), kids[1]->val);
numexpr: OP_PLUS(imm, numexpr)        # 1 # genAddI((kids[1]->regname), kids[0]->val);
numexpr: OP_MINUS(numexpr, numexpr)   # 2 # genMinus(kids[0]->regname, kids[1]->regname);
numexpr: OP_MINUS(numexpr, imm)       # 1 # genMinusI(kids[0]->regname, kids[1]->val);
numexpr: OP_MINUS(imm, numexpr)       # 1 # genMinusI(kids[1]->regname, kids[0]->val);
numexpr: OP_MULT(numexpr, numexpr)    # 2 # genMult(kids[0]->regname, kids[1]->regname);
numexpr: OP_MULT(numexpr, imm)        # 1 # genMultI(kids[0]->regname, kids[1]->val);
numexpr: OP_MULT(imm, numexpr)        # 1 # genMultI(kids[1]->regname, kids[0]->val);
numexpr: OP_AND(numexpr, numexpr)     # 2 # genAnd(kids[0]->regname, kids[1]->regname);
numexpr: OP_AND(numexpr, imm)         # 1 # genAndI(kids[0]->regname, kids[1]->val);
numexpr: OP_AND(imm, numexpr)         # 1 # genAndI(kids[1]->regname, kids[0]->val);
numexpr: OP_NOT(numexpr)              # 2 # genNot(bnode->regname, kids[0]->regname);
numexpr: OP_NOT(imm)                  # 1 # assignFromNum(bnode->regname, kids[0]->val);
numexpr: OP_LESS(numexpr, numexpr)    # 1 # genLess(kids[0]->regname, kids[1]->regname);
numexpr: OP_EQUAL(expr, expr)         # 1 # genEqual(kids[0]->regname, kids[1]->regname);
numexpr: OP_NUM                       # 1 # assignFromNum(bnode->regname, bnode->val);
numexpr: OP_IDENT                     # 1 # genNumFromIdent(bnode->regname, bnode->ident);
numexpr: expr                         # 1 # genNumFromReg(bnode->regname, kids[0]->regname);

imm: OP_PLUS(imm, imm)       # 0 # bnode->val = kids[0]->val + kids[1]->val;
imm: OP_MINUS(imm, imm)      # 0 # bnode->val = kids[0]->val - kids[1]->val;
imm: OP_MULT(imm, imm)       # 0 # bnode->val = kids[0]->val * kids[1]->val;
imm: OP_NOT(imm)             # 0 # bnode->val = !bnode->val;
imm: OP_AND(imm, imm)        # 0 # bnode->val = kids[0]->val & kids[1]->val;
imm: OP_LESS(imm, imm)       # 0 # bnode->val = (kids[0]->val < kids[1]->val) ? 1 : 0;
imm: OP_EQUAL(imm, imm)      # 0 # bnode->val = (kids[0]->val == kids[1]->val) ? 1 : 0;
imm: OP_ISNUM(imm)           # 0 # bnode->val = 1;
imm: OP_ISFUN(imm)           # 0 # bnode->val = 0;
imm: OP_ISLIST(imm)          # 0 # bnode->val = 0;
imm: OP_NUM                  # 0

%%
